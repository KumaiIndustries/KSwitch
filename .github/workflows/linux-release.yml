name: Build and Release KSwitch

on:
  # Auto-run when you push a tag like 'v1.0.0'
  push:
    tags:
      - 'v*'
  # Also expose a manual "Run workflow" button where you can type a tag
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (including the leading v), e.g. v1.0.1'
        required: true
        default: ''

env:
  REPO: KumaiIndustries/KSwitch
  OUTPUT_DIR_WIN: artifacts/win_x64
  OUTPUT_DIR_LINUX: artifacts/linux-x64
  PROJECT_PATH: src/Ryujinx/KSwitch.csproj

jobs:
  release:
    runs-on: windows-latest
    name: Build & Upload

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Determine version tag
        id: version
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Create release.json
        run: |
          git fetch --unshallow || echo "already full clone"
          GIT_HASH=$(git rev-parse HEAD)
          cat <<EOF > release.json
          {
            "BuildVersion": "${{ env.TAG }}",
            "BuildGitHash": "$GIT_HASH",
            "ReleaseChannelName": "stable",
            "ConfigFileName": "Config.json",
            "ReleaseChannelOwner": "KumaiIndustries",
            "ReleaseChannelRepo": "KSwitch"
          }
          EOF
        shell: bash

      - name: Create GitHub release if needed
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Windows
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 --self-contained true /p:PublishSingleFile=true -o ${{ env.OUTPUT_DIR_WIN }}
        shell: pwsh

      - name: Strip PDBs (Windows)
        run: Remove-Item ${{ env.OUTPUT_DIR_WIN }}\*.pdb -Force -ErrorAction SilentlyContinue
        shell: pwsh

      - name: Build Linux
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r linux-x64 --self-contained true /p:PublishSingleFile=true -o ${{ env.OUTPUT_DIR_LINUX }}
        shell: pwsh

      - name: Strip PDBs (Linux)
        run: Remove-Item ${{ env.OUTPUT_DIR_LINUX }}\*.pdb -Force -ErrorAction SilentlyContinue
        shell: pwsh

      - name: Archive Windows (.zip)
        run: |
          ZIP=KSwitch-${{ env.TAG }}-win_x64.zip
          Compress-Archive -Path ${{ env.OUTPUT_DIR_WIN }}\* -DestinationPath $ZIP -Force
          echo "ARTIFACT_WIN=$ZIP" >> $GITHUB_OUTPUT
        shell: pwsh

      - name: Archive Linux (.tar.gz)
        run: |
          # use underscore in filename: linux_x64.tar.gz
          TAR=KSwitch-${{ env.TAG }}-linux_x64.tar.gz
          tar -czf $TAR -C ${{ env.OUTPUT_DIR_LINUX }} .
          echo "ARTIFACT_LIN=$TAR" >> $GITHUB_OUTPUT

      - name: Upload Windows Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.archive-windows.outputs.ARTIFACT_WIN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.archive-linux.outputs.ARTIFACT_LIN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up
        run: rm release.json
        shell: bash
