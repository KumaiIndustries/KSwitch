name: Build & Release KSwitch

on:
  # Auto-run when you git push --tags v1.0.0
  push:
    tags:
      - 'v*'
  # Manual trigger: click "Run workflow" and enter your tag
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (include leading v, e.g. v1.0.1)'
        required: true
        default: ''

env:
  REPO: KumaiIndustries/KSwitch
  PROJECT: src/Ryujinx/KSwitch.csproj
  OUT_WIN: artifacts/win_x64
  OUT_LIN: artifacts/linux-x64

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v3

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: 🔖 Determine version tag
        id: tag
        shell: bash
        run: |
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "::error::Not a tag build and no manual tag provided"
            exit 1
          fi

      - name: 📝 Create release.json
        shell: bash
        run: |
          GIT_HASH=$(git rev-parse HEAD)
          cat > release.json <<EOF
          {
            "BuildVersion":"${TAG}",
            "BuildGitHash":"$GIT_HASH",
            "ReleaseChannelName":"stable",
            "ConfigFileName":"Config.json",
            "ReleaseChannelOwner":"KumaiIndustries",
            "ReleaseChannelRepo":"KSwitch"
          }
          EOF

      - name: 📦 Create or update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name:    ${{ env.TAG }}
          token:   ${{ secrets.GITHUB_TOKEN }}
          draft:   false
          prerelease: false

      - name: 🏗️ Publish Windows (win-x64)
        shell: bash
        run: |
          dotnet publish ${{ env.PROJECT }} \
            -c Release -r win-x64 --self-contained true \
            /p:PublishSingleFile=true -o ${{ env.OUT_WIN }}

      - name: 🧹 Strip PDBs from Windows
        shell: bash
        run: |
          find ${{ env.OUT_WIN }} -name '*.pdb' -delete

      - name: 🏗️ Publish Linux (linux-x64)
        shell: bash
        run: |
          dotnet publish ${{ env.PROJECT }} \
            -c Release -r linux-x64 --self-contained true \
            /p:PublishSingleFile=true -o ${{ env.OUT_LIN }}

      - name: 🧹 Strip PDBs from Linux
        shell: bash
        run: |
          find ${{ env.OUT_LIN }} -name '*.pdb' -delete

      - name: 🗜️ Archive Windows (zip)
        id: zip
        shell: bash
        run: |
          ZIP="KSwitch-${TAG}-win_x64.zip"
          rm -f "$ZIP"
          zip -r "$ZIP" "${{ env.OUT_WIN }}"
          echo "artifact=$ZIP" >> $GITHUB_OUTPUT

      - name: 🗜️ Archive Linux (tar.gz)
        id: targz
        shell: bash
        run: |
          TAR="KSwitch-${TAG}-linux_x64.tar.gz"
          rm -f "$TAR"
          tar -czf "$TAR" -C "${{ env.OUT_LIN }}" .
          echo "artifact=$TAR" >> $GITHUB_OUTPUT

      - name: 🚀 Upload Windows asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          files: ${{ steps.zip.outputs.artifact }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Upload Linux asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          files: ${{ steps.targz.outputs.artifact }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧹 Clean up
        shell: bash
        run: rm -f release.json
