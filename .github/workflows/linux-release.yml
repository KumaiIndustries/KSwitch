on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  VERSION: ${{ github.ref_name }}
  REPO: KumaiIndustries/KSwitch
  OUTPUT_DIR_WIN: ./artifacts/win_x64
  OUTPUT_DIR_LINUX: ./artifacts/linux-x64
  PROJECT_PATH: ./src/Ryujinx/KSwitch.csproj

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'  # or your target SDK version

      - name: Setup GitHub CLI
        uses: cli/cli@v3

      - name: PowerShell Release Script
        shell: pwsh
        run: |
          param (
              [string]$Version = "${{ env.VERSION }}",
              [string]$Repo = "${{ env.REPO }}",
              [string]$OutputDirWin = "${{ env.OUTPUT_DIR_WIN }}",
              [string]$OutputDirLinux = "${{ env.OUTPUT_DIR_LINUX }}",
              [string]$ProjectPath = "${{ env.PROJECT_PATH }}"
          )

          if (-not $Version) {
              Write-Host "You must provide a version tag to build."
              exit 1
          }

          # Get current git commit hash
          $GitHash = git rev-parse HEAD
          Write-Host "Git commit hash: $GitHash"

          # Create release.json
          $releaseJson = @{
              BuildVersion = $Version
              BuildGitHash = $GitHash
              ReleaseChannelName = "stable"
              ConfigFileName = "Config.json"
              ReleaseChannelOwner = "KumaiIndustries"
              ReleaseChannelRepo = "KSwitch"
          } | ConvertTo-Json -Depth 2

          $releaseJsonPath = Join-Path "." "release.json"
          $releaseJson | Out-File -Encoding UTF8 $releaseJsonPath
          Write-Host "Created release.json"

          # Check if release exists
          gh release view "$Version" --repo $Repo -q . > $null 2>&1
          if ($LASTEXITCODE -ne 0) {
              gh release create "$Version" --repo $Repo --title "$Version" --notes "KSwitch version $Version"
              Write-Host "Created GitHub release $Version"
          } else {
              Write-Host "GitHub release $Version already exists"
          }

          # Build the project (just build, no publish yet)
          Write-Host "Building version $Version..."
          dotnet build $ProjectPath -c Release /p:Version=$Version
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Build failed."
              exit 1
          }

          # Publish Windows build
          Write-Host "Publishing for Windows (win-x64)..."
          dotnet publish $ProjectPath -c Release -r win-x64 --self-contained true /p:PublishSingleFile=true -o $OutputDirWin
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Windows publish failed."
              exit 1
          }

          # Remove .pdb files from Windows build
          Get-ChildItem -Path $OutputDirWin -Recurse -Include *.pdb | Remove-Item -Force -ErrorAction SilentlyContinue
          Write-Host "Removed .pdb files from $OutputDirWin"

          # Publish Linux build
          Write-Host "Publishing for Linux (linux-x64)..."
          dotnet publish $ProjectPath -c Release -r linux-x64 --self-contained true /p:PublishSingleFile=true -o $OutputDirLinux
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Linux publish failed."
              exit 1
          }

          # Remove .pdb files from Linux build
          Get-ChildItem -Path $OutputDirLinux -Recurse -Include *.pdb | Remove-Item -Force -ErrorAction SilentlyContinue
          Write-Host "Removed .pdb files from $OutputDirLinux"

          # Archive Windows build as zip
          $archivePathWin = "./KSwitch-$Version-win_x64.zip"
          if (Test-Path $archivePathWin) { Remove-Item $archivePathWin }
          Compress-Archive -Path "$OutputDirWin\*" -DestinationPath $archivePathWin -Force
          Write-Host "Archived Windows build to $archivePathWin"

          # Archive Linux build as tar.gz with underscore in filename
          $arch = if ([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture -eq "Arm64") { "arm64" } else { "x64" }
          $archivePathLinux = "./KSwitch-$Version-linux_$arch.tar.gz"
          if (Test-Path $archivePathLinux) { Remove-Item $archivePathLinux }

          # Create .tar.gz for Linux build
          tar -czf $archivePathLinux -C $OutputDirLinux .
          Write-Host "Archived Linux build to $archivePathLinux"

          # Upload Windows archive
          gh release upload "$Version" $archivePathWin --repo $Repo --clobber
          Write-Host "Uploaded Windows archive to GitHub release $Version"

          # Upload Linux archive
          gh release upload "$Version" $archivePathLinux --repo $Repo --clobber
          Write-Host "Uploaded Linux archive to GitHub release $Version"

          # Cleanup
          Remove-Item $releaseJsonPath -ErrorAction SilentlyContinue
          Write-Host "Deleted release.json"
